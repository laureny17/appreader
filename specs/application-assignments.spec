<original concept>

concept ApplicationAssignments
purpose Store application data (including read-counts) and assign them one at a time to users to read, allowing skips.
principle The admin can add applications to an active event. This should initialize all applications in the database to
    have 0 reads. Each reader is assigned one application to read at a time. Applications are assigned prioritizing
    those with the fewest reads so far, and a user cannot read an application they have already read. Applications can
    be skipped, and get prioritized if so.
state
    a set of CurrentAssignments with
        a User
        an Application
        a startTime DateTime
    a set of Applications with
        an applicantID String
        an applicantYear String
        an answers set of Strings
        a readsCompleted Number
        a readers set of Users
actions
    addApplication (adder: User, event: Event, applicantID: String, applicantYear: String, answers: set of String)
        requires: adder is the Admin and event is an active event
        effect: create applications for each applicantID associated with an applicantYear, a set of answers
            from the application, and initialize readsCompleted = 0 and an empty set of readers
    getNextAssignment (user: User, event: Event, startTime: DateTime): (assignment: CurrentAssignments)
        requires: event is an active event, and user is a reader for event
        effect: create a CurrentAssignment for this user with startTime, with an application
            that does not have user in readers set


<edited concept, AI-augmented>
concept ApplicationAssignments
purpose Store application data (including read-counts) and assign them one at a time to users to read, allowing skips.
principle The admin can add applications to an active event. This should initialize all applications in the database to
    have 0 reads and include a set of comments generated by an LLM. Each reader is assigned one application to read at
    a time. Applications are assigned prioritizing those with the fewest reads so far, and a user cannot read an application
    they have already read. Applications can be skipped, and get prioritized if so. The LLM uses question and rubric sets
    of strings passed as parameters to generate AI comments.
state
    a set of CurrentAssignments with
        a User
        an Application
        a startTime DateTime
    a set of Applications with
        an applicantID String
        an applicantYear String
        an answers set of Strings
        a readsCompleted Number
        a readers set of Users
        a set of AIComments
    a set of AIComments with
        a category String
        a quotedSnippet String
        a justification String
actions
    async addApplication (adder: User, event: Event, applicantID: String, applicantYear: String,
    questions: set of String, answers: set of String, rubric: set of String, eligibilityCriteria: set of Strings, llm: GeminiLLM)
        requires: adder is the Admin and event is an active event
        effect: create an application for the event for an applicantID associated with an applicantYear, a set of answers
            from the application, initialize readsCompleted = 0 and an empty set of readers, and and populate AIComments using an
            LLM analysis of the answers that incorporates the provided event questions and rubric, where the category is "Strong," "Weak," or "Attention," the quoted snippet is a substring
            from answers, and the justification is a non-empty string
    getNextAssignment (user: User, event: Event, startTime: DateTime): (assignment: CurrentAssignments)
        requires: event is an active event, and user is a reader for event
        effect: create a CurrentAssignment for this user with startTime, with an application
            that does not have user in readers set
    skipAssignment (user: User, assignment: CurrentAssignments)
        requires: assignment.user = user
        effect: mark the application as skipped by adding user to its readers set, remove CurrentAssignment for user
            so the application can be reassigned to other users but not to this user
    incrementOnSubmit (user: User, assignment: CurrentAssignments)
        requires: assignment.user = user
        effect: increment readsCompleted for the application, add user to readers set, and remove CurrentAssignment for user
